#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# The MIT License (MIT)
#
# Copyright (c) 2016 Radek Senfeld <rush@logic.cz>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import os
import sys
import tarfile
import argparse
import urlparse
import requests
import cStringIO
import subprocess

BASEDIR = "/etc/letsencrypt"


def fetch_certificate(endpoint, domain):
	domain_basedir = os.path.join(BASEDIR, domain)
	url = urlparse.urljoin(endpoint, "/v1/get/" + domain)
	renewed = False

	if not os.path.isdir(domain_basedir):
		url += "?d=1"

	r = requests.get(url)

	if r.status_code == 200:
		io = cStringIO.StringIO(r.content)

		with tarfile.open(fileobj=io, mode="r") as tarball:
			tarball.extractall(BASEDIR)

		renewed = True

	return renewed

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description="simp_le server client")
	parser.add_argument("-e", "--endpoint", required=True, help="simp_le server API endpoint")
	parser.add_argument("-r", "--reload", help="reload command")
	parser.add_argument("domain", nargs='+', help="Domain name")
	args = parser.parse_args()

	reload = False
	for domain in args.domain:
		if fetch_certificate(args.endpoint, domain):
			reload = True

	if reload and args.reload:
		subprocess.call(args.reload, shell=True)

	sys.exit(reload)
