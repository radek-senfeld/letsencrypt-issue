#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# The MIT License (MIT)
#
# Copyright (c) 2016 Radek Senfeld <rush@logic.cz>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import os
import bottle
import tarfile
import argparse
import cStringIO
import subprocess
import yaml

BASEDIR = "/etc/letsencrypt"

server = bottle.Bottle()


def load_config(config_file, defaults={}):
	config = defaults

	if os.path.isfile(config_file):
		with open(config_file, "r") as f:
			config.update(yaml.load(f) or {})

	return config

def load_global_config():
	config_file = os.path.join(BASEDIR, "config.yaml")
	config = load_config(config_file, defaults=dict(
		webroot="/srv/www/.acme/",
		subdomains=["www"],
	))

	return config

def load_domain_config(domain):
	domain_basedir = os.path.join(BASEDIR, domain)
	domain_config_file = os.path.join(domain_basedir, "config.yaml")
	domain_config = load_config(domain_config_file, defaults=dict(
		subdomains=[],
		alts=[],
	))

	return domain_config

def issue_certificate(domain):
	config = load_global_config()
	domain_config = load_domain_config(domain)
	domain_basedir = os.path.join(BASEDIR, domain)

	# make domain dir if necessary
	if not os.path.isdir(domain_basedir):
		os.makedirs(domain_basedir, mode=0750)

	# command to run
	subdomains = [domain]
	subdomains += ["{}.{}".format(subdomain, domain) for subdomain in set(config.get("subdomains") + domain_config.get("subdomains"))]

	for alt in domain_config.get("alts"):
		subdomains += [alt, "www.{}".format(alt)]

	cmd = [
		"simp_le",
		"--email", domain_config.get("email", "info@{}".format(domain)),
		"--default_root", config.get("webroot"),
		"-f", "account_key.json",
		"-f", "key.pem",
		"-f", "cert.pem",
		"-f", "fullchain.pem",
	]

	for subdomain in subdomains:
		cmd += ["-d", subdomain]

	os.chdir(domain_basedir)

	return subprocess.call(cmd)

def make_tarball(domain):
	domain_basedir = os.path.join(BASEDIR, domain)
	io = cStringIO.StringIO()

	with tarfile.open(fileobj=io, mode="w:gz") as tarball:
		tarball.add(domain_basedir, arcname=domain)

	return io.getvalue()

@server.route("/v1/get/<domain>")
def get(domain):
	return_code = issue_certificate(domain)
	force_download = bottle.request.query.d

	if return_code == 2:
		return bottle.HTTPResponse(status=500)

	if return_code == 1 and not force_download:
		return bottle.HTTPResponse(status=304)

	bottle.response.content_type = "application/x-compressed"
	return make_tarball(domain)

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description="simp_le server")
	parser.add_argument("--host", default="0.0.0.0")
	parser.add_argument("--port", type=int, default=8082)
	args = parser.parse_args()

	server.run(host=args.host, port=args.port)
